{
	"info": {
		"_postman_id": "ee3571d0-fd36-4240-a9bb-d9ee9e881bd5",
		"name": "reqres.in",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get List User",
			"id": "ee59e65f-73c8-4a78-8509-3525cb9d6344",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}"
			},
			"response": []
		},
		{
			"name": "Post New User Positive Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cce8ee3f-216f-433c-ba08-34a323869171",
						"exec": [
							"//Positive Case\r",
							"pm.test(\"Status code is 201 (created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - name, job, id, and createdAt\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('name');\r",
							"  pm.expect(responseData).to.have.property('job');\r",
							"  pm.expect(responseData).to.have.property('id');\r",
							"  pm.expect(responseData).to.have.property('createdAt');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c02affe8-3592-4f17-9cb9-2787f3257901",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "435ae58f-da19-48f0-9421-911eeef880ee",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{JSON_BODY_POST}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}"
			},
			"response": []
		},
		{
			"name": "Post New User Negative Case",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "37a36cb3-b8c2-4223-b102-35a7a6413548",
						"exec": [
							"\r",
							"// Negative Test\r",
							"\r",
							"pm.test(\"Request body(raw) is not missing\", function () {\r",
							"    pm.expect(pm.request.body.raw).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"validate body fields (job) is a not empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"validate response is not missing (by ID)\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response not equals with request\", function () {\r",
							"    const request = pm.request.body;\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response.name).to.equal(request.name);\r",
							"    pm.expect(response.job).to.not.equal(request.job);\r",
							"    pm.expect(response.id).to.not.equal(request.id);\r",
							"    pm.expect(response.createdAt).to.not.equal(request.createdAt);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "239f5ded-b807-4c90-9eb7-7e1524fd95da",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}"
			},
			"response": []
		}
	]
}